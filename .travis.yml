env:
  global:
      - REPO_DIR=nipy
      - BUILD_COMMIT=master
      - PLAT=x86_64
      - UNICODE_WIDTH=32
      - NP_BUILD_DEP="numpy==1.13"
      - NP_TEST_DEP="numpy==1.13"
      - SP_DEP="scipy==1.0.0"

language: python
# Default Python version is usually 2.7
python: 3.5
sudo: required
dist: trusty
services: docker

matrix:
  exclude:
      # Exclude the default Python 3.5 build
      - python: 3.5
  include:
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - UNICODE_WIDTH=16
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=2.7
        - PLAT=i686
        - UNICODE_WIDTH=16
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.6
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.7
        - PLAT=i686
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
        - SP_DEP=scipy
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.8
        - PLAT=i686
        - SP_DEP=scipy
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.9
        - SP_DEP=scipy
    - os: linux
      env:
        - MB_PYTHON_VERSION=3.9
        - PLAT=i686
        - SP_DEP=scipy
    - os: osx
      language: generic
      env: MB_PYTHON_VERSION=2.7
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.6
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.7
        - SP_DEP=scipy
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.8
        - SP_DEP=scipy
    - os: osx
      language: generic
      env:
        - MB_PYTHON_VERSION=3.9
        - SP_DEP=scipy

before_install:
    - BUILD_DEPENDS="$NP_BUILD_DEP Cython nibabel sympy $SP_DEP"
    - TEST_DEPENDS="$NP_TEST_DEP nose nibabel sympy $SP_DEP"
    - source multibuild/common_utils.sh
    - source multibuild/travis_steps.sh
    - before_install

install:
    # Maybe get and clean and patch source
    - clean_code $REPO_DIR $BUILD_COMMIT
    - build_wheel $REPO_DIR $PLAT

script:
    - install_run $PLAT

after_success:
    # Upload wheels to Rackspace container
    - ANACONDA_ORG="multibuild-wheels-staging";
    - pip install git+https://github.com/Anaconda-Server/anaconda-client
    - anaconda -t ${SCIPY_STAGING_UPLOAD_TOKEN} upload --force -u ${ANACONDA_ORG} ${TRAVIS_BUILD_DIR}/wheelhouse/*.
